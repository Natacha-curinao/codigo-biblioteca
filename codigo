mport mysql.connector
from mysql.connector import Error

# Clase base para manejar excepciones
class DatabaseError(Exception):
    pass

# Clase Autor
class Autor:
    def __init__(self, nombre: str, nacionalidad: str, fecha_nacimiento: str):
        self.nombre = nombre
        self.nacionalidad = nacionalidad
        self.fecha_nacimiento = fecha_nacimiento

    def __str__(self):
        return f"{self.nombre} ({self.nacionalidad})"

# Clase Libro
class Libro:
    def __init__(self, titulo: str, autor: Autor, anio: int, genero: str, copias: int):
        self.titulo = titulo
        self.autor = autor
        self.anio = anio
        self.genero = genero
        self.copias = copias

    def __str__(self):
        return f"{self.titulo} - {self.autor} ({self.anio}, {self.genero})"

# Clase Biblioteca
class Biblioteca:
    def __init__(self, db_config):
        try:
            self.connection = mysql.connector.connect(**db_config)
            if self.connection.is_connected():
                print("Conectado a la base de datos")
        except Error as e:
            raise DatabaseError(f"Error al conectar a la base de datos: {e}")

    def agregar_libro(self, libro: Libro):
        if not self.validar_libro(libro):
            print("Datos del libro inválidos. No se puede agregar.")
            return

        try:
            cursor = self.connection.cursor()
            cursor.execute("INSERT INTO libros (titulo, autor, anio, genero, copias) VALUES (%s, %s, %s, %s, %s)",
                           (libro.titulo, libro.autor.nombre, libro.anio, libro.genero, libro.copias))
            self.connection.commit()
            print("Libro agregado exitosamente.")
        except Error as e:
            raise DatabaseError(f"Error al agregar libro: {e}")
        finally:
            cursor.close()

    def consultar_libros(self):
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM libros")
            return cursor.fetchall()
        except Error as e:
            raise DatabaseError(f"Error al consultar libros: {e}")
        finally:
            cursor.close()

    def modificar_libro(self, titulo: str, nuevo_libro: Libro):
        if not self.validar_libro(nuevo_libro):
            print("Datos del libro inválidos. No se puede modificar.")
            return

        try:
            cursor = self.connection.cursor()
            cursor.execute("UPDATE libros SET titulo=%s, autor=%s, anio=%s, genero=%s, copias=%s WHERE titulo=%s",
                           (nuevo_libro.titulo, nuevo_libro.autor.nombre, nuevo_libro.anio, nuevo_libro.genero, nuevo_libro.copias, titulo))
            self.connection.commit()
            if cursor.rowcount > 0:
                print("Libro modificado exitosamente.")
            else:
                print("No se encontró el libro para modificar.")
        except Error as e:
            raise DatabaseError(f"Error al modificar libro: {e}")
        finally:
            cursor.close()

    def eliminar_libro(self, titulo: str):
        try:
            cursor = self.connection.cursor()
            cursor.execute("DELETE FROM libros WHERE titulo=%s", (titulo,))
            self.connection.commit()
            if cursor.rowcount > 0:
                print("Libro eliminado exitosamente.")
            else:
                print("No se encontró el libro para eliminar.")
        except Error as e:
            raise DatabaseError(f"Error al eliminar libro: {e}")
        finally:
            cursor.close()

    def validar_libro(self, libro: Libro) -> bool:
        """Valida los datos del libro."""
        if not libro.titulo or not libro.autor or libro.anio <= 0 or libro.copias < 0:
            return False
        return True

# Configuración de la base de datos
db_config = {
    'user': 'root',
    'password': 'tu_contraseña',
    'host': '127.0.0.1',
    'database': 'biblioteca',
}

# Ejemplo de uso
if __name__ == "__main__":
    try:
        biblioteca = Biblioteca(db_config)

        # Crear un autor y un libro
        autor1 = Autor("Gabriel García Márquez", "Colombia", "1927-03-06")
        libro1 = Libro("Cien años de soledad", autor1, 1967, "Novela", 5)

        # Agregar libro
        biblioteca.agregar_libro(libro1)

        # Consultar libros
        libros = biblioteca.consultar_libros()
        for libro in libros:
            print(libro)

        # Modificar libro
        libro_modificado = Libro("Cien años de soledad", autor1, 1967, "Novela", 10)
        biblioteca.modificar_libro("Cien años de soledad", libro_modificado)

        # Eliminar libro
        biblioteca.eliminar_libro("Cien años de soledad")

    except DatabaseError as e:
        print(e)
    finally:
        if 'biblioteca' in locals():
            biblioteca.connection.close()
            print("Conexión a la base de datos cerrada.")
